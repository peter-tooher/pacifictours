@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class ="dropdown">
    <button @onclick="ToggleUserMenu"
        @onfocusout="HideUserMenu"
        class="btn btn-secondary dropdown-toggle user-button">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a href="profile" class="dropdown-item">Profile</a>
                <hr />
                <button class="dropdown-item" @onclick="GoToTourBookings">Tours</button>
                <button class="dropdown-item" @onclick="GoToHotelBookings">Hotels</button>
                <button class="dropdown-item" @onclick="GoToPackageBookings">Packages</button>
                <AdminMenu />
                <button class="dropdown-item" @onclick="Logout">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a href="register" class="dropdown-item">Register</a>
                <a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Login</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    // A flag to control the visibility of the user menu
    private bool showUserMenu = false;

    // A computed property that returns the appropriate CSS class based on the visibility of the user menu
    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    // A method to toggle the visibility of the user menu
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    // A method to hide the user menu after a delay
    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    // A method to log out the user
    private async Task Logout()
    {
        // Remove the authentication token from local storage
        await LocalStorage.RemoveItemAsync("authToken");
        // Update the authentication state
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // Navigate to the home page
        NavigationManager.NavigateTo("");
    }
            
    // Methods to navigate to different booking confirmation pages
    private void GoToTourBookings()
    {
        NavigationManager.NavigateTo("/TourBookingConfirmation");
    }

    private void GoToHotelBookings()
    {
        NavigationManager.NavigateTo("/HotelBookingConfirmation");
    }

    private void GoToPackageBookings()
    {
        NavigationManager.NavigateTo("packages/PackageBookingConfirmation");
    }
}