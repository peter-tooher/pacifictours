@page "/packages/tourpackagesdetails/{Id:int}"
@using System.Security.Claims
@inject HttpClient HttpClient
@inject ITourService TourService
@inject BookingService BookingService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (tour == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@tour.TourImageUrl" alt="@tour.TourName" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@tour.TourName</h2>
            <p>@tour.TourDescription</p>
            <p> <strong>Tour Price:</strong> £@tour.TourPrice  </p>
            <input type="date" min="@DateTime.Now.AddDays(29).ToString(" yyyy-MM-dd")" @bind="checkInDate" />

            @if (isLoggedIn)
            {
                <button class="btn btn-primary" @onclick="HandleFormSubmit">
                    <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Confirm Booking
                </button>
                @if (!string.IsNullOrEmpty(message))
                {
                    <p>@message</p>
                }
                <p>By clicking "Confirm Booking", you agree to pay a deposit of 20%.</p>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Tour tour = null;
    private string message = string.Empty;
    private DateTime checkInDate = DateTime.Now.Date;
    private DateTime paymentDueDate;

    bool isLoggedIn = false;

    protected override async Task OnParametersSetAsync()
    {
        await TourService.GetTours();
        var result = await TourService.GetTourById(Id);

        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            tour = result.Data;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = authState.User.Identity.IsAuthenticated;
    }


    private async Task HandleFormSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            BookingService.CurrentBooking.UserId = int.Parse(userId);

            decimal price = tour.TourPrice;
            decimal totalPrice = tour.TourPrice;
            decimal deposit = totalPrice * 0.2m;
            decimal remainingBalance = totalPrice - deposit;
            paymentDueDate = checkInDate.AddDays(-28);

            var bookingsOnDate = await HttpClient.GetFromJsonAsync<List<TourBookings>>($"api/TourBookings/ByTourAndDate/{tour.TourId}/{checkInDate:yyyy-MM-dd}");
            int maxSpaces = (tour.TourName == "Real Britain" || tour.TourName == "Best of Britain") ? 30 : 40;

            if (bookingsOnDate.Count >= maxSpaces)
            {
                 message = "Sorry, there are no available spaces for this tour on the selected date.";
                 return;
            }

            if (checkInDate < DateTime.Now.AddDays(29))
            {
                message = "You can only book a tour that is 29 days in the future or more.";
                return;
            }

            BookingService.UpdateTourOptions(tour.TourId, tour.TourName, checkInDate, deposit, price);

            var response = await HttpClient.PostAsJsonAsync("api/PackageBookings", BookingService.ReturnBooking());

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/packages/PackageBookingConfirmation");
                BookingService.ClearBooking();
            }
        }
    }
}